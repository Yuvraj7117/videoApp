'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.getReq = exports.putReq = exports.postReq = exports.getAuthReq = exports.putAuthReq = exports.postAuthReq = undefined;

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Helper Functions that return a function that send a fetch request
* The promise returned by fetch is then resolved in the fetch wrapper (fetch-wrapper.js)
**/

/**
* Create an authenticated POST request
*
* @param {string} - url
* @param {object} - data (request body)
* @param {string} - token (for authentication)
* @param {object} - header - optionally pass in further header options
*
**/

var postAuthReq = exports.postAuthReq = function postAuthReq(url, data, token, header) {
  return function () {
    return (0, _isomorphicFetch2.default)(url, post(reqOptions(data, _extends({}, header, authHeader(token)))));
  };
};

/**
* Create an authenticated PUT request
*
* @param {string} - url
* @param {object} - data (request body)
* @param {string} - token (for authentication)
* @param {object} - header - optionally pass in further header options
*
**/

var putAuthReq = exports.putAuthReq = function putAuthReq(url, data, token, header) {
  return function () {
    return (0, _isomorphicFetch2.default)(url, put(reqOptions(data, _extends({}, header, authHeader(token)))));
  };
};

/**
* Create an authenticated GET request
*
* @param {string} - url
* @param {string} - token (for authentication)
* @param {object} - header - optionally pass in further header options
*
**/

var getAuthReq = exports.getAuthReq = function getAuthReq(url, token, header) {
  return function () {
    return (0, _isomorphicFetch2.default)(url, get(reqOptions(null, _extends({}, header, authHeader(token)))));
  };
};

/**
* Create an unauthenticated POST request
*
* @param {string} - url
* @param {object} - data (request body)
* @param {object} - header - optionally pass in further header options
*
**/

var postReq = exports.postReq = function postReq(url, data, header) {
  return function () {
    return (0, _isomorphicFetch2.default)(url, post(reqOptions(data), header));
  };
};

/**
* Create an unauthenticated PUT request
*
* @param {string} - url
* @param {object} - data (request body)
* @param {object} - header - optionally pass in further header options
*
**/

var putReq = exports.putReq = function putReq(url, data, header) {
  return function () {
    return (0, _isomorphicFetch2.default)(url, put(reqOptions(data), header));
  };
};

/**
* Create an unauthenticated GET request
*
* @param {string} - url
* @param {object} - header - optionally pass in further header options
*
**/

var getReq = exports.getReq = function getReq(url, header) {
  return function () {
    return (0, _isomorphicFetch2.default)(url, get(reqOptions(null, header)));
  };
};

// Helper functions to format the request options

var reqOptions = function reqOptions() {
  var data = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
  var headers = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var reqHeader = {
    headers: _extends({
      'Content-Type': 'application/json'
    }, headers)
  };
  return data ? _extends({}, reqHeader, { body: JSON.stringify(data) }) : reqHeader;
};

var post = function post(reqOptions) {
  return _extends({}, reqOptions, {
    method: 'POST'
  });
};

var put = function put(reqOptions) {
  return _extends({}, reqOptions, {
    method: 'PUT'
  });
};

var get = function get(reqOptions) {
  return _extends({}, reqOptions, {
    method: 'GET'
  });
};

var authHeader = function authHeader(token) {
  if (!token) {
    throw new Error('Token required to send an authenticated request');
  } else {
    return { 'Authorization': token };
  }
};

var helpers = exports.helpers = {
  reqOptions: reqOptions,
  post: post,
  put: put,
  get: get,
  authHeader: authHeader
};